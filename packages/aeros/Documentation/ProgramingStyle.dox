/**
\page style Programming Style Guidelines.
\section style_intro Introduction.
Aero-S was started at the University of Colorado in 1994 using early C++ compilers.
As a result a lot of the code uses techniques which are not recommended in modern C++, particularly
regarding memory allocation and de-allocation.
\section new_code_guidelines Guidelines for New Code Contributions.
* Please follow the following programming style guidelines:
*
* - const correctness: Make sure you declare any arguments that will not be modified
*    as const and any method that does not touch the object of the class to which it belongs
*    as const.
*    const correctness makes it easier to understand what a method might be modifying/computing
*    without having to read the detailed documentation or (worse) having to read the code.
* - Provide move semantics constructors and move assignments for large objects.
*    In most cases, you can let the compiler generate the code for you by using the
*    \c = \c default syntax next to the declaration.
*    Move semantics allows to avoid temporary allocations and deallocations.
*    Example:
*    \code
*    class DoubleSet {
*        std::set<int> usedNodes;
*        std::set<int> usedElements;
*    public:
*        DoubleSet(const ElementSet &eSet); // Constructor from a set of elements
*        DoubleSet(DoubleSet &&) = default;  // Use the default move constructor
*        DoubleSet(const DoubleSet &) = default; // Use the default copy constructor
*    };
*    \endcode
* - Do not return pointers to objects that have been allocated. Return either by value or via
*     a shared pointer (\c std::shared_ptr<Type> ). If you return by value, the move constructor or move
*     semantics assignment will ensure that there no expensive temporary allocations and deallocations.
* \section conventions Coding Conventions
  The following code presentation conventions have been adopted:
  - Namespaces and Class names start with a capital.
  - Variables start with a lowercase.
  - Composite words capitalize the first letter of each of the combined words (Camel case).
  - Indentation is by tabs using \em smart-tabs in IDEs to keep alignment, yet allow each programmer
  to use a different visual indentation.
  - Namespaces are not indented.

  \section commandments The Ten Commandments

  - Do not use owning raw pointers in classes: Use unique_ptr or shared_ptr. Raw pointers should be only non-owning
  generally short lived objects.
  - Do not use raw pointers for arrays. Use vector, or gsl::span depending on whether it is owned or a reference.
*/