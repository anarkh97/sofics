/**
\page cleanup Cleanup Goals and TODOs
\section cleanup_goals Goals
\subsection cg_easy Easy Goals
Though most of the following goals are not difficult, they may be tedious because they impact many place and may
involve cascading between files. Examples of such cascading effects are the const-correctness changes.
  - Make the code const-correct.
  - Change the type of indices currently being 'int' into meaningful aliases. It clarifies the meaning of many
    variables.
  - Replace all 'new' and 'delete' pairs for arrays within a routine with a std::vector
  - Replace loops setting arrays to uniform values with 'assign' on the std::vector, or use the constructor.
\subsection cg_medium Goals of Medium Difficulty
  - Document every method whose name/arguments is not sufficient to know what it does, or that has side-effects.
  - Replace all raw pointers having ownership meaning with smart pointers or vectors.
  - Replace all raw pointers to arrays in arguments with gsl::span.
  - Replace basic mathematical vectors with Eigen based versions
  - Remove all raw 'new' and 'delete' except in small generic objects such as vector/matrices.
\subsection cg_hard Hard Goals
  - Break down overgrown classes into clean conceptual objects/abstractions.
    - Domain
    - SubDomain
  - Separate abstractions into interface base classes:
    - Solvers have matrix assembly mixed in other matrices have an incompatible assembly hierarchy
      creating duplication of code.
\subsubsection cg_domain Reorganizing the Domain
The Domain class has been the class that handles everything to solve a problem without a decomposition.
Unfortunately, it has grown into the tote bag into everything has been thrown in without any regard to organization.
It has no less than 186 data members.
It mixes:
   - Problem description data:
        - Geometric data.
        - Material data.
        - Boundary condition data.
   - Solution timings

*/