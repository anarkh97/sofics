

This is a text file to help compile the fem/aeros code using cmake.

note: the cmake option has been created by Michel Lesoinne and modified by JF Dord in February 2009.

In order to use cmake, 
- first type "cmake -i ."
   + the fine options can be chosen here
   + the debug/release option is chosen here
   + a summary is given at the end (it may need improvement)
   + a detailed summary of options and links to libraries is printed in CMakeCache.txt


- to compile the executable type "make"

On ahpcrcfe: run the script cmake/su-ahpcrc_gcc43_openmpi-1.4.1 or cmake/su-ahpcrc_intel12_openmpi-1.6-1 from the directory where you want to build the code.
The gcc43 script assumes that your default mpi implementation is openmpi14_gcc43-1.4.1. You can check this and change it using:
$ mpi-selector --list
$ mpi-selector --set openmpi14_gcc43-1.4.1
After changing your default mpi implementation you must log out and log in again before the changes take effect.
The intel12 script uses modules and does not require you to set or change your default mpi implementation. If you use this script to build the code you must remember to load the intel12 modules before you run the code:
$ module load intel/intel-12 openmpi/openmpi16_intel12

On independence: run the script cmake/independence_intel13_openmpi161 from the directory where you want to build the code. If you use this script to build the code you must remember to load the intel13 modules before you run the code:
$ load intel/intel-13 openmpi/openmpi161_intel13 

On nivation: Make sure /opt/intel/fc/9.0/bin is in your path.
~michel/cmake-2.6.2-Linux-i386/bin/cmake -DEXTRALIB="-L/opt/intel/fc/9.0/lib/ -lifcore" .

On regelation, make sure /share/apps/intel/fce/9.1.039/bin/ is in your path and use:
~michel/cmake-2.6.2-Linux-i386/bin/cmake -DEXTRALIB="-L/share/apps/intel/fce/9.1.039/lib/ -lifcore -limf -lirc" -DMPI_INCLUDE_PATH=/opt/mpich/myrinet/gnu/include .

Note: Both directories given above can be in your path. Only one of them will contain a fortran compiler and cmake will pick it.

If CMake initially finds a different MPI than was intended, and you want to use the MPI compiler auto-detection for a different MPI implementation, set MPI_COMPILER to the MPI compiler driver you want to use (e.g., mpicxx) and then set MPI_LIBRARY to the string MPI_LIBRARY-NOTFOUND. When you re-configure, auto-detection of MPI will run again with the newly-specified MPI_COMPILER.

